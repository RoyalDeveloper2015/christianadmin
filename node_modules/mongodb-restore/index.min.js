"use strict";

function error(err) {
    logger(err.message);
}

function readMetadata(collection, metadata, next) {
    var doc, t = metadata + collection.collectionName;
    if (fs.existsSync(t) === !1) return next(new Error("missing metadata for " + collection.collectionName));
    try {
        doc = JSON.parse(fs.readFileSync(t));
    } catch (err) {
        return next(err);
    }
    if (0 === doc.length) return next(null);
    for (var i = 0, c = 0, ii = doc.length; i < ii; ++i) {
        var indexes = doc[i];
        if (/^_id/.test(indexes.name) !== !0) {
            var name = indexes.name.substr(0, indexes.name.length - 2);
            collection.createIndex(name, indexes, function(err) {
                err ? next(err) : ++c === ii && next(null);
            });
        } else ++c === ii && next(null);
    }
}

function makeDir(path, next) {
    fs.stat(path, function(err, stats) {
        return err && "ENOENT" === err.code ? (logger("make dir at " + path), fs.mkdir(path, function(err) {
            next(err, path);
        })) : stats && stats.isDirectory() === !1 ? (logger("unlink file at " + path), fs.unlink(path, function() {
            logger("make dir at " + path), fs.mkdir(path, function(err) {
                next(err, path);
            });
        })) : void next(null, path);
    });
}

function rmDir(path, next) {
    fs.readdirSync(path).forEach(function(first) {
        var database = path + first;
        if (fs.statSync(database).isDirectory() !== !1) {
            var metadata = "", collections = fs.readdirSync(database);
            fs.existsSync(database + "/.metadata") === !0 && (metadata = database + "/.metadata/", 
            delete collections[collections.indexOf(".metadata")]), collections.forEach(function(second) {
                var collection = database + "/" + second;
                fs.statSync(collection).isDirectory() !== !1 && (fs.readdirSync(collection).forEach(function(third) {
                    var document = collection + "/" + third;
                    return fs.unlinkSync(document), next ? next(null, document) : "";
                }), "" !== metadata && fs.unlinkSync(metadata + second), fs.rmdirSync(collection));
            }), "" !== metadata && fs.rmdirSync(metadata), fs.rmdirSync(database);
        }
    });
}

function fromJson(collection, collectionPath, next) {
    var docsBulk = [], docs = fs.readdirSync(collectionPath), last = docs.length, index = 0;
    return last < 1 ? next(null) : void docs.forEach(function(docName) {
        var doc, docPath = collectionPath + docName;
        if (fs.statSync(docPath).isFile() === !1) return last === ++index ? next(null) : error(null);
        try {
            doc = JSON.parse(fs.readFileSync(docPath));
        } catch (err) {
            return last === ++index ? next(err) : error(err);
        }
        return docsBulk.push({
            insertOne: {
                document: doc
            }
        }), last === ++index ? collection.bulkWrite(docsBulk, next) : null;
    });
}

function fromBson(collection, collectionPath, next) {
    var docsBulk = [], docs = fs.readdirSync(collectionPath), last = docs.length, index = 0;
    return last < 1 ? next(null) : void docs.forEach(function(docName) {
        var doc, docPath = collectionPath + docName;
        if (fs.statSync(docPath).isFile() === !1) return last === ++index ? next(null) : error(null);
        try {
            doc = BSON.deserialize(fs.readFileSync(docPath));
        } catch (err) {
            return last === ++index ? next(err) : error(err);
        }
        return docsBulk.push({
            insertOne: {
                document: doc
            }
        }), last === ++index ? collection.bulkWrite(docsBulk, next) : null;
    });
}

function allCollections(db, name, metadata, parser, next) {
    var collections = fs.readdirSync(name), last = ~~collections.length, index = 0;
    return 0 === last ? next(null) : (collections.indexOf(".metadata") >= 0 && (delete collections[collections.indexOf(".metadata")], 
    last--), void collections.forEach(function(collectionName) {
        var collectionPath = name + collectionName;
        if (!fs.statSync(collectionPath).isDirectory()) {
            var err = new Error(collectionPath + " is not a directory");
            return last === ++index ? next(err) : error(err);
        }
        db.createCollection(collectionName, function(err, collection) {
            return err ? last === ++index ? next(err) : error(err) : (logger("select collection " + collectionName), 
            void meta(collection, metadata, function() {
                parser(collection, collectionPath + "/", function(err) {
                    return err ? last === ++index ? next(err) : error(err) : last === ++index ? next(null) : null;
                });
            }));
        });
    }));
}

function someCollections(db, collections, next) {
    var last = ~~collections.length, index = 0;
    return 0 === last ? next(null) : void collections.forEach(function(collection) {
        db.collection(collection, function(err, collection) {
            return logger("select collection " + collection.collectionName), err ? last === ++index ? next(err) : error(err) : void collection.drop(function(err) {
                return err ? last === ++index ? next(err) : error(err) : last === ++index ? next(null) : null;
            });
        });
    });
}

function wrapper(my) {
    function callback(err) {
        logger("restore stop"), my.tar && rmDir(my.dir), null !== my.callback ? (logger("callback run"), 
        my.callback(err)) : err && logger(err);
    }
    function go(root) {
        my.metadata === !0 && (metadata = root + ".metadata/"), require("mongodb").MongoClient.connect(my.uri, my.options, function(err, db) {
            function next(err) {
                return err ? (logger("db close"), db.close(), callback(err)) : void discriminator(db, root, metadata, parser, function(err) {
                    logger("db close"), db.close(), callback(err);
                });
            }
            return logger("db open"), err ? callback(err) : my.drop === !0 ? (logger("drop database"), 
            db.dropDatabase(next)) : my.dropCollections ? (logger("drop collections"), Array.isArray(my.dropCollections) === !0 ? someCollections(db, my.dropCollections, next) : db.collections(function(err, collections) {
                err && error(err), my.dropCollections = [];
                for (var i = 0, ii = collections.length; i < ii; i++) {
                    var collectionName = collections[i].collectionName;
                    systemRegex.test(collectionName) === !1 && my.dropCollections.push(collectionName);
                }
                someCollections(db, my.dropCollections, next);
            })) : void next(null);
        });
    }
    var parser;
    if ("function" == typeof my.parser) parser = my.parser; else switch (my.parser) {
      case "bson":
        BSON = require("bson"), BSON = new BSON.BSONPure.BSON(), parser = fromBson;
        break;

      case "json":
        parser = fromJson;
        break;

      default:
        throw new Error("missing parser option");
    }
    var discriminator = allCollections;
    if (null === my.logger) logger = function() {}; else {
        logger = require("logger-request")({
            filename: my.logger,
            standalone: !0,
            daily: !0,
            winston: {
                logger: "_mongo_r" + my.logger,
                level: "info",
                json: !1
            }
        }), logger("restore start");
        var log = require("mongodb").Logger;
        log.setLevel("info"), log.setCurrentLogger(function(msg) {
            logger(msg);
        });
    }
    var metadata = "";
    return meta = my.metadata === !0 ? readMetadata : function(a, b, c) {
        return c();
    }, my.tar ? void makeDir(my.dir, function() {
        var extractor = require("tar").Extract({
            path: my.dir
        }).on("error", callback).on("end", function() {
            for (var dirs = fs.readdirSync(my.dir), i = 0, ii = dirs.length; i < ii; i++) {
                var t = my.dir + dirs[i];
                if (fs.statSync(t).isFile() === !1) return go(t + "/");
            }
        });
        null !== my.stream ? (logger("get tar file from stream"), my.stream.pipe(extractor)) : (logger("open tar file at " + my.root + my.tar), 
        fs.createReadStream(my.root + my.tar).on("error", callback).pipe(extractor));
    }) : go(my.root);
}

function restore(options) {
    var resolve = require("path").resolve, opt = options || Object.create(null);
    if (!opt.uri) throw new Error("missing uri option");
    if (!opt.stream) {
        if (!opt.root) throw new Error("missing root option");
        if (!fs.existsSync(opt.root) || !fs.statSync(opt.root).isDirectory()) throw new Error("root option is not a directory");
    }
    var my = {
        dir: __dirname + "/dump/",
        uri: String(opt.uri),
        root: resolve(String(opt.root)) + "/",
        stream: opt.stream || null,
        parser: opt.parser || "bson",
        callback: "function" == typeof opt.callback ? opt.callback : null,
        tar: "string" == typeof opt.tar ? opt.tar : null,
        logger: "string" == typeof opt.logger ? resolve(opt.logger) : null,
        metadata: Boolean(opt.metadata),
        drop: Boolean(opt.drop),
        dropCollections: Boolean(opt.dropCollections) ? opt.dropCollections : null,
        options: "object" == typeof opt.options ? opt.options : {}
    };
    my.stream && (my.tar = !0), wrapper(my);
}

var systemRegex = /^system\./, fs = require("graceful-fs"), BSON, logger, meta;

module.exports = restore;
